install.packages("chron")
### Librerías que necesitamos:
library(lubridate)
library(tseries)
library(forecast)
x = as.POSIXct("2019-12-25 11:45:34") # Número de segundos
y = as.POSIXlt("2019-12-25 11:45:34")
x; y # Se obtiene lo mismo, pero qué hay detrás de esto?
unclass(x)
unclass(y)
x = as.Date("2019-12-25")
x; class(x)
unclass(x)
x = chron("12/25/2019", "23:34:09")
library(chron)
x = chron("12/25/2019", "23:34:09")
x
class(x)
unclass(x)
a = as.character(c("1993-12-30 23:45",
"1994-11-05 11:43",
"1992-03-09 21:54"))
class(a)
b = strptime(a, format = "%Y-%m-%d %H:%M") #format nos dice cómo se debe interpretar el texto
b; class(b)
OlsonNames()
50/4
autoplot((nottem))
### Datos faltantes y Outliers
## Import ts.Rmissing.csv
mydata=read.csv('Rmissing.csv')
setwd("C:/Repositories/curso-series-temporales/2. Serie temporal en R y Python/R")
### Datos faltantes y Outliers
## Import ts.Rmissing.csv
mydata=read.csv('Rmissing.csv')
library(forecast)
library(ggplot2)
View(mydata)
# Convertir la segunda columna en una serie de tiempo sin especificar frecuencia
myts = ts(mydata$mydata)
myts
class(myts)
# Comprobar si hay NAs y outliers
summary(myts)
plot(myts)
# Detección automática de outliers con la librería forecast
myts1 = tsoutliers(myts)
myts1
plot(myts)
plot(myts1)
myts1
plot(myts)
# También hay un método para NA en el paquete forecast
myts.NAinterp = na.interp(myts) #rellena NA con interpolación
myts.NAinterp
myts
# Limpiando NAs y outliers con tsclean del paquete forecast
mytsclean = tsclean(myts)
plot(mytsclean)
summary(mytsclean)
summary(myts)
?cbind.data.frame
### Ejercicio 1: Crear un dataframe con información de fecha y tiempo
# Vector de fechas con diferentes formatos
a = c("1998,11,11", "1983/01/23", "1982:09:04", "1945-05-09", 19821224, "1974.12.03", 19871210)
a = ymd(a, tz = "CET") ;a
# Vector de tiempos con diferentes formatos
b = c("22 4 5", "04;09;45", "11:9:56", "23,15,12", "14 16 34", "8 8 23", "21 16 14")
b = hms(b); b
# Vector de medidas
f = rnorm(7,10); f = round(f, digits = 2); f
# Creando el dataframe
date_time_measurement = cbind(date = a, time = b, measurement = f)
date_time_measurement
### Ejercicio 1: Crear un dataframe con información de fecha y tiempo
# Vector de fechas con diferentes formatos
a = c("1998,11,11", "1983/01/23", "1982:09:04", "1945-05-09", 19821224, "1974.12.03", 19871210)
a = ymd(a, tz = "CET") ;a
# Vector de tiempos con diferentes formatos
b = c("22 4 5", "04;09;45", "11:9:56", "23,15,12", "14 16 34", "8 8 23", "21 16 14")
b = hms(b); b
# Vector de medidas
f = rnorm(7,10); f = round(f, digits = 2); f
# Creando el dataframe
date_time_measurement = cbind.data.frame(date = a, time = b, measurement = f)
date_time_measurement
?cbind.data.frame
x = ymd_hm(tz = "CET", "2014-04-12 23:12")
minute(x) = 7 ; x
with_tz(x, tz="Europe/London")
y = ymd_hm(tz = "CET", "2015-12-12 09:45")
y-x
(y-x)[[1]]
res <- y-x
res <- y-x
class(res)
install.packages("dygraphs")
#Importando datos de precios de cierre de Starbucks y Microsoft
library(readr)
sbux.df <- read_csv("sbuxPrices.csv")
View(sbux.df)
#Importando datos de precios de cierre de Starbucks y Microsoft
library(readr)
library(zoo)
library(dygraphs)
library(tseries)
sbux.df <- read_csv("sbuxPrices.csv")
View(sbux.df)
sbux.ts = ts(data=sbux.df$Adj.Close, frequency = 12,
start=c(1993,3), end=c(2008,3))
class(sbux.ts)
msft.df <- read_csv("msftPrices.csv")
View(sbux.df)
msft.ts = ts(data=msft.df$Adj.Close, frequency = 12,
start=c(1993,3), end=c(2008,3))
#Fechas y frecuencia de la serie
sbux.ts
start(sbux.ts)
frequency(sbux.ts)
#Fechas y frecuencia de la serie
sbux.ts
start(sbux.ts)
end(sbux.ts)
frequency(sbux.ts)
#Subconjunto de la serie de tiempo
tmp = sbux.ts[1:5]
class(tmp)
tmp = window(sbux.ts, start=c(1993, 3), end=c(1993,8))
class(tmp)
sbuxmsft.ts = cbind(sbux.ts, msft.ts)
class(sbuxmsft.ts)
#Seleccionando las primeras 5 filas:
window(sbuxmsft.ts, start=c(1993, 3), end=c(1993,7))
sbuxmsft.ts
#Seleccionando las primeras 5 filas:
window(sbuxmsft.ts, start=c(1993, 3), end=c(1993,7))
#Plot objeto ts
plot(sbux.ts, col="blue", lwd=2, ylab="Adjusted close",
main="Monthly closing price of SBUX")
sbux.ts
#Plot objeto ts
plot(sbux.ts, col="blue", lwd=2, ylab="Adjusted close",
main="Monthly closing price of SBUX")
#Plot para múltiples columnas
#En gráficos diferentes
plot(sbuxmsft.ts)
legend(1994, 35, legend=c("SBUX","MSFT"), col=c("blue", "red"),
lty=1:2)
#Fecha
td = seq(as.Date("1993/3/1"), as.Date("2008/3/1"), "months")
class(td)
head(td)
#Alternativa
td2 = as.Date(sbux.df$Date, format="%m/%d/%Y")
head(td2)
#Combinando el índice de tiempo a las dos series de precios
sbux.z = zoo(x=sbux.df$Adj.Close, order.by=td)
msft.z = zoo(x=msft.df$Adj.Close, order.by=td)
class(sbux.z)
str(sbux.z)
head(sbux.z)
#Extrayendo el indice de tiempo y los datos
index(sbux.z)
coredata(sbux.z)
#Start and End
start(sbux.z)
end(sbux.z)
View(sbux.df)
?ts
#Fechas y frecuencia de la serie
sbux.ts
sbux.ts = ts(data=sbux.df$Adj.Close, frequency = 4,
start=c(1993,3), end=c(2008,3))
#Fechas y frecuencia de la serie
sbux.ts
sbux.ts = ts(data=sbux.df$Adj.Close, frequency = 12,
start=c(1993,3), end=c(2008,3))
start(sbux.ts)
end(sbux.ts)
frequency(sbux.ts)
#Subconjunto de la serie de tiempo
tmp = sbux.ts[1:5]
class(tmp)
tmp
tmp = window(sbux.ts, start=c(1993, 3), end=c(1993,8))
class(tmp)
sbuxmsft.ts = cbind(sbux.ts, msft.ts)
class(sbuxmsft.ts)
sbuxmsft.ts
tmp
?tsclean
#Seleccionando las primeras 5 filas:
window(sbuxmsft.ts, start=c(1993, 3), end=c(1993,7))
#Plot objeto ts
plot(sbux.ts, col="blue", lwd=2, ylab="Adjusted close",
main="Monthly closing price of SBUX")
#Dibujar un subconjunto (Acercar)
plot(window(sbux.ts, start=c(2000,3), end=c(2008,3)),
ylab="Adjusted close",col="blue", lwd=2,
main="Monthly closing price of SBUX")
#Plot objeto ts
plot(sbux.ts, col="blue", lwd=2, ylab="Adjusted close",
main="Monthly closing price of SBUX")
#Dibujar un subconjunto (Acercar)
plot(window(sbux.ts, start=c(2000,3), end=c(2008,3)),
ylab="Adjusted close",col="blue", lwd=2,
main="Monthly closing price of SBUX")
#Plot para múltiples columnas
#En gráficos diferentes
plot(sbuxmsft.ts)
plot(sbuxmsft.ts, plot.type="single",
main="Monthly closing prices on SBUX and MSFT",
ylab="Adjusted close price",
col=c("blue", "red"), lty=1:2)
legend(1994, 35, legend=c("SBUX","MSFT"), col=c("blue", "red"),
lty=1:2)
#Fecha
td = seq(as.Date("1993/3/1"), as.Date("2008/3/1"), "months")
class(td)
head(td)
#Alternativa
td2 = as.Date(sbux.df$Date, format="%m/%d/%Y")
head(td2)
sbux.df
#Combinando el índice de tiempo a las dos series de precios
sbux.z = zoo(x=sbux.df$Adj.Close, order.by=td)
msft.z = zoo(x=msft.df$Adj.Close, order.by=td)
class(sbux.z)
str(sbux.z)
head(sbux.z)
#Extrayendo el indice de tiempo y los datos
index(sbux.z)
coredata(sbux.z)
#Extrayendo el indice de tiempo y los datos
index(sbux.z)
coredata(sbux.z)
#Start and End
start(sbux.z)
end(sbux.z)
#Ventaja de zoo: extraer subconjunto indexando con las fechas
sbux.z[as.Date(c("2000/3/1", "2003/3/1"))]
#window() también funciona
window(sbux.z, start=as.Date("2000/3/1"), end=as.Date("2003/3/1"))
#Combinando dos series
sbuxmsft.z = cbind(sbux.z, msft.z)
class(sbuxmsft.z)
head(sbuxmsft.z)
#Combinando dos series
sbuxmsft.z = cbind(sbux.z, msft.z)
class(sbuxmsft.z)
head(sbuxmsft.z)
plot(sbux.z, col="blue", lty=1, lwd=2, ylim=c(0,50),main="Monthly closing prices of SBUX and MFST",
ylab="Adjusted close price")
lines(msft.z, col="red", lty=2, lwd=2)
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
plot(sbuxmsft.z, plot.type="single", col=c("blue","red"), lty=1:2,
lwd=2,main="Monthly closing prices of SBUX and MFST",
ylab="Adjusted close price")
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
library(tseries)
#Importar datos directamente como objeto zoo
sbux.z2 = read.zoo("sbuxPrices.csv",
format="%m/%d/%Y", sep=",", header=T)
#Importar datos de Yahoo Finance
SBUX.z = get.hist.quote(instrument="sbux", start="1993-03-01",
end="2020-06-01", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
View(SBUX.z)
MSFT.z = get.hist.quote(instrument="msft", start="1993-03-01",
end="2020-06-01", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
plot(cbind(SBUX.z,MSFT.z), plot.type="single", col=c("blue","red"), lty=1:2,
lwd=2,main="Monthly closing prices of SBUX and MFST",
ylab="Adjusted close price")
legend(x="topleft", legend=c("SBUX","MSFT"), col=c("blue","red"),
lty=1:2)
#Libería dygraphs
dygraph(SBUX.z, "Monthly closing prices of SBUX")
dygraph(cbind(SBUX.z,MSFT.z), "Monthly closing prices of SBUX and MFST")
#############################################################3 Datos diarios
#Generamos datos aleatorios
datos <- rnorm(78, 0, 10)
fechas <- seq(as.Date("2020-03-06"), as.Date("2020-05-22"), by = "day")
fechas
fechas[1]
as.numeric(format(fechas[1], "%j"))
miserie.z=zoo(datos, fechas)
miserie.z=zoo(datos, fechas)
plot(miserie.z)
dygraph(miserie.z)
plot(miserie.z)
dygraph(miserie.z)
